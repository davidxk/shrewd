##Unit test
***
###Mailman
**trusted** 

###Parser
Parser::Parser(Player* pPlayer, Mailman* pMailman):

**Tested internally**


void Parser::writeReg()

*test after player is done, by simply cout the msg*


void Parser::writeAction()

*test after player is done, by simply cout the msg*


void Parser::readSeat(string& message)

* input: "seat/ \nbutton: 4444 2000 8000 \nsmall blind: 5555 2000 8000 \nbig blind: 8888 2000 8000 \n2222 2000 8000 \n3333 2000 8000 \n7777 2000 8000 \n1111 2000 8000 \n6666 2000 8000 \n/seat \n"
* output: "/seat \n" & proper output


void Parser::readBlind(string& message)

* input: "blind/ \n5555: 50 \n8888: 100 \n/blind \n"
* output: "/blind \n"


void Parser::readHold(string& message)

* input: "hold/ \nDIAMONDS 4 \nSPADES K \n/hold \n" 
* output: "/hold \n"


void Parser::readInquire(string msg)

* input: "inquire/ \n5555 1900 8000 100 call \n4444 2000 8000 0 fold \n6666 1900 8000 100 call \n1111 2000 8000 0 fold \n7777 1900 8000 100 call \n3333 1900 8000 100 call \n2222 2000 8000 0 fold \n8888 1900 8000 100 blind \ntotal pot: 500 \n/inquire \n"
* output: "/inquire \n"


void Parser::readFlop(string& msg)

* input: "flop/ \nHEARTS 6 \nDIAMONDS 3 \nCLUBS 10 \n/flop \n" 
* output: "/flop \n"


void Parser::readTurn(string& msg)

* input: "turn/ \nDIAMONDS 7 \n/turn \n" 
* output: "/turn \n"


void Parser::readRiver(string& msg)

**no need to test**

void Parser::readShowdown(string& msg)

* input: "showdown/ \ncommon/ \nHEARTS 6 \nDIAMONDS 3 \nCLUBS 10 \nDIAMONDS 7 \nSPADES 9 \n/common \n4: 5555 DIAMONDS 4 SPADES K HIGH_CARD \n3: 8888 HEARTS 3 CLUBS K ONE_PAIR \n4: 3333 HEARTS 5 HEARTS K HIGH_CARD \n2: 7777 CLUBS 6 SPADES 6 THREE_OF_A_KIND \n1: 6666 SPADES 7 CLUBS 7 THREE_OF_A_KIND \n/showdown \n" 
* output: ""


void Parser::readPotwin(string& msg)

* input: "pot-win/ \n7777: 250 \n1111: 250 \n/pot-win \n" 
* ouput: ""

string Parser::sticky(string& message, string header)
**trusted**
