!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACE	globals.h	7;"	d
ACT_ALLIN	globals.h	60;"	d
ACT_BIG_BLIND	globals.h	61;"	d
ACT_BLIND	globals.h	63;"	d
ACT_CALL	globals.h	57;"	d
ACT_CHECK	globals.h	58;"	d
ACT_FOLD	globals.h	59;"	d
ACT_RAISE	globals.h	56;"	d
ACT_SMALL_BLIND	globals.h	62;"	d
Action	action.h	/^class Action$/;"	c
Action::act	action.h	/^	int act;$/;"	m	class:Action	access:public
Action::bet	action.h	/^	int bet;$/;"	m	class:Action	access:public
Action::state	action.h	/^	int state;$/;"	m	class:Action	access:public
BASE_COMB_FLOP	globals.h	18;"	d
BBLIND_INDEX	globals.h	100;"	d
CLUB	globals.h	/^typedef enum{ CLUB, DIAMOND, HEART, SPADE }Color;$/;"	e	enum:__anon1
COMM_SIZE	globals.h	13;"	d
Card	card.cpp	/^Card::Card()$/;"	f	class:Card	signature:()
Card	card.cpp	/^Card::Card(int color, int figure)$/;"	f	class:Card	signature:(int color, int figure)
Card	card.h	/^	Card();$/;"	p	class:Card	access:public	signature:()
Card	card.h	/^	Card(int color, int figure);$/;"	p	class:Card	access:public	signature:(int color, int figure)
Card	card.h	/^class Card$/;"	c
Card::Card	card.cpp	/^Card::Card()$/;"	f	class:Card	signature:()
Card::Card	card.cpp	/^Card::Card(int color, int figure)$/;"	f	class:Card	signature:(int color, int figure)
Card::Card	card.h	/^	Card();$/;"	p	class:Card	access:public	signature:()
Card::Card	card.h	/^	Card(int color, int figure);$/;"	p	class:Card	access:public	signature:(int color, int figure)
Card::color	card.h	/^	int color; \/\/As Color$/;"	m	class:Card	access:public
Card::figure	card.h	/^	int figure; \/\/2~14$/;"	m	class:Card	access:public
Card::getCard	card.cpp	/^Card Card::getCard(char color, int figure)$/;"	f	class:Card	signature:(char color, int figure)
Card::getCard	card.h	/^	static Card getCard(char color, int figure);$/;"	p	class:Card	access:public	signature:(char color, int figure)
Card::inputCard	card.cpp	/^Card Card::inputCard()$/;"	f	class:Card	signature:()
Card::inputCard	card.h	/^	static Card inputCard();$/;"	p	class:Card	access:public	signature:()
Card::is	card.cpp	/^bool Card::is(Card card)$/;"	f	class:Card	signature:(Card card)
Card::is	card.h	/^	bool is(Card card);$/;"	p	class:Card	access:public	signature:(Card card)
Card::print	card.cpp	/^string Card::print()$/;"	f	class:Card	signature:()
Card::print	card.h	/^	string print();$/;"	p	class:Card	access:public	signature:()
CheckerPlus	checkplus.h	/^class CheckerPlus$/;"	c
CheckerPlus::checkFlush	checkplus.cpp	/^bool CheckerPlus::checkFlush(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkFlush	checkplus.h	/^	static bool checkFlush(vector<Card> hand, Hand& ret); \/\/color leading$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkFour	checkplus.cpp	/^bool CheckerPlus::checkFour(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkFour	checkplus.h	/^	static bool checkFour(vector<Card> hand, Hand& ret); \/\/repeat$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkFullHouse	checkplus.cpp	/^bool CheckerPlus::checkFullHouse(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkFullHouse	checkplus.h	/^	static bool checkFullHouse(vector<Card> hand, Hand& ret); \/\/trip two$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkHand	checkplus.cpp	/^Hand CheckerPlus::checkHand(vector<Card> handcard)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard)
CheckerPlus::checkHand	checkplus.h	/^	static Hand checkHand(vector<Card> hand);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand)
CheckerPlus::checkHighCard	checkplus.cpp	/^bool CheckerPlus::checkHighCard(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkHighCard	checkplus.h	/^	static bool checkHighCard(vector<Card> hand, Hand& ret);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkPair	checkplus.cpp	/^bool CheckerPlus::checkPair(vector<Card> handcard, Hand& ret) $/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkPair	checkplus.h	/^	static bool checkPair(vector<Card> hand, Hand& ret) ; \/\/repeat$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkStraight	checkplus.cpp	/^bool CheckerPlus::checkStraight(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkStraight	checkplus.h	/^	static bool checkStraight(vector<Card> hand, Hand& ret); \/\/start$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkStraightFlush	checkplus.cpp	/^bool CheckerPlus::checkStraightFlush(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkStraightFlush	checkplus.h	/^	static bool checkStraightFlush(vector<Card> hand, Hand& ret); $/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkTrip	checkplus.cpp	/^bool CheckerPlus::checkTrip(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkTrip	checkplus.h	/^	static bool checkTrip(vector<Card> hand, Hand& ret); \/\/repeat$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::checkTwoPairs	checkplus.cpp	/^bool CheckerPlus::checkTwoPairs(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
CheckerPlus::checkTwoPairs	checkplus.h	/^	static bool checkTwoPairs(vector<Card> hand, Hand& ret); \/\/higher lower$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
CheckerPlus::commDiff	checkplus.h	/^	static vector<int> commDiff;$/;"	m	class:CheckerPlus	access:private
CheckerPlus::figCnt	checkplus.h	/^	static vector<FigCnt> figCnt;$/;"	m	class:CheckerPlus	access:private
CheckerPlus::findMostColor	checkplus.cpp	/^void CheckerPlus::findMostColor(vector<Card> handcard,int& mostColor,int& theColor)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard,int& mostColor,int& theColor)
CheckerPlus::findMostColor	checkplus.h	/^	static void findMostColor(vector<Card> handcard, int& mostColor, int& theColor);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> handcard, int& mostColor, int& theColor)
CheckerPlus::sort	checkplus.cpp	/^void CheckerPlus::sort(vector<Card>& handcard)$/;"	f	class:CheckerPlus	signature:(vector<Card>& handcard)
CheckerPlus::sort	checkplus.h	/^	static void sort(vector<Card>& hand);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card>& hand)
Color	globals.h	/^typedef enum{ CLUB, DIAMOND, HEART, SPADE }Color;$/;"	t	typeref:enum:__anon1
DEAL	globals.h	35;"	d
DEALER_INDEX	globals.h	98;"	d
DIAMOND	globals.h	/^typedef enum{ CLUB, DIAMOND, HEART, SPADE }Color;$/;"	e	enum:__anon1
D_BET	globals.h	36;"	d
EMPTY_PLAYER	globals.h	85;"	d
FIGURE_START	globals.h	10;"	d
FLOP	globals.h	37;"	d
FLUSH	globals.h	28;"	d
FLUSH_IMPOSS	globals.h	46;"	d
FLUSH_THRESH	globals.h	45;"	d
FOUR	globals.h	30;"	d
FULLHOUSE	globals.h	29;"	d
F_BET	globals.h	38;"	d
FigCnt	checkplus.h	/^class FigCnt$/;"	c
FigCnt::color	checkplus.h	/^	int color;$/;"	m	class:FigCnt	access:public
FigCnt::figure	checkplus.h	/^	int figure;$/;"	m	class:FigCnt	access:public
HAND_SIZE	globals.h	11;"	d
HEART	globals.h	/^typedef enum{ CLUB, DIAMOND, HEART, SPADE }Color;$/;"	e	enum:__anon1
HIGHCARD	globals.h	23;"	d
HOLE_SIZE	globals.h	12;"	d
Hand	hand.cpp	/^Hand::Hand()$/;"	f	class:Hand	signature:()
Hand	hand.cpp	/^Hand::Hand(int rank)$/;"	f	class:Hand	signature:(int rank)
Hand	hand.h	/^	Hand();$/;"	p	class:Hand	access:public	signature:()
Hand	hand.h	/^	Hand(int rank);$/;"	p	class:Hand	access:public	signature:(int rank)
Hand	hand.h	/^class Hand$/;"	c
Hand::Hand	hand.cpp	/^Hand::Hand()$/;"	f	class:Hand	signature:()
Hand::Hand	hand.cpp	/^Hand::Hand(int rank)$/;"	f	class:Hand	signature:(int rank)
Hand::Hand	hand.h	/^	Hand();$/;"	p	class:Hand	access:public	signature:()
Hand::Hand	hand.h	/^	Hand(int rank);$/;"	p	class:Hand	access:public	signature:(int rank)
Hand::compare	hand.cpp	/^int Hand::compare(Hand* hand)$/;"	f	class:Hand	signature:(Hand* hand)
Hand::compare	hand.h	/^	int compare(Hand* hand);$/;"	p	class:Hand	access:public	signature:(Hand* hand)
Hand::first	hand.h	/^	vector<int> first;$/;"	m	class:Hand	access:public
Hand::print	hand.cpp	/^void Hand::print()$/;"	f	class:Hand	signature:()
Hand::print	hand.h	/^	void print();$/;"	p	class:Hand	access:public	signature:()
Hand::printDetails	hand.cpp	/^void Hand::printDetails()$/;"	f	class:Hand	signature:()
Hand::printDetails	hand.h	/^	void printDetails();$/;"	p	class:Hand	access:public	signature:()
Hand::rank	hand.h	/^	int rank;$/;"	m	class:Hand	access:public
MAXDATASIZE	mailman.h	3;"	d
MAXLEN	mailman.h	4;"	d
MAX_PLAYER	globals.h	86;"	d
Mailman	mailman.h	/^class Mailman$/;"	c
Mailman::bindCon	mailman.cpp	/^void Mailman::bindCon()$/;"	f	class:Mailman	signature:()
Mailman::bindCon	mailman.h	/^	void bindCon();$/;"	p	class:Mailman	access:public	signature:()
Mailman::client_addr	mailman.h	/^    struct sockaddr_in client_addr; $/;"	m	class:Mailman	typeref:struct:Mailman::sockaddr_in	access:public
Mailman::client_ip	mailman.h	/^	char client_ip[MAXLEN], client_port[MAXLEN];$/;"	m	class:Mailman	access:public
Mailman::client_port	mailman.h	/^	char client_ip[MAXLEN], client_port[MAXLEN];$/;"	m	class:Mailman	access:public
Mailman::closeCon	mailman.cpp	/^void Mailman::closeCon()$/;"	f	class:Mailman	signature:()
Mailman::closeCon	mailman.h	/^	void closeCon();$/;"	p	class:Mailman	access:public	signature:()
Mailman::connectCon	mailman.cpp	/^void Mailman::connectCon()$/;"	f	class:Mailman	signature:()
Mailman::connectCon	mailman.h	/^	void connectCon();$/;"	p	class:Mailman	access:public	signature:()
Mailman::getMsg	mailman.cpp	/^string Mailman::getMsg()$/;"	f	class:Mailman	signature:()
Mailman::getMsg	mailman.h	/^	string getMsg();$/;"	p	class:Mailman	access:public	signature:()
Mailman::init	mailman.cpp	/^void Mailman::init(char* si, char* sp, char* ci, char* cp)$/;"	f	class:Mailman	signature:(char* si, char* sp, char* ci, char* cp)
Mailman::init	mailman.h	/^	void init(char* si, char* sp, char* ci, char* cp);$/;"	p	class:Mailman	access:public	signature:(char* si, char* sp, char* ci, char* cp)
Mailman::message	mailman.h	/^	char message[MAXDATASIZE];$/;"	m	class:Mailman	access:public
Mailman::read	mailman.cpp	/^string Mailman::read()$/;"	f	class:Mailman	signature:()
Mailman::read	mailman.h	/^	string read();$/;"	p	class:Mailman	access:public	signature:()
Mailman::server_addr	mailman.h	/^	struct sockaddr_in server_addr;$/;"	m	class:Mailman	typeref:struct:Mailman::sockaddr_in	access:public
Mailman::server_ip	mailman.h	/^	char server_ip[MAXLEN], server_port[MAXLEN];$/;"	m	class:Mailman	access:public
Mailman::server_port	mailman.h	/^	char server_ip[MAXLEN], server_port[MAXLEN];$/;"	m	class:Mailman	access:public
Mailman::setMsg	mailman.cpp	/^void Mailman::setMsg(string msg)$/;"	f	class:Mailman	signature:(string msg)
Mailman::setMsg	mailman.h	/^	void setMsg(string msg);$/;"	p	class:Mailman	access:public	signature:(string msg)
Mailman::socket_fd	mailman.h	/^	int socket_fd;$/;"	m	class:Mailman	access:public
Mailman::write	mailman.cpp	/^void Mailman::write()$/;"	f	class:Mailman	signature:()
Mailman::write	mailman.cpp	/^void Mailman::write(string msg)$/;"	f	class:Mailman	signature:(string msg)
Mailman::write	mailman.h	/^	void write();$/;"	p	class:Mailman	access:public	signature:()
Mailman::write	mailman.h	/^	void write(string msg);$/;"	p	class:Mailman	access:public	signature:(string msg)
NAME_FLOP_RAISER	globals.h	81;"	d
NAME_FOLD_PLAYER	globals.h	77;"	d
NAME_HUMAN_PLAYER	globals.h	75;"	d
NAME_SIMU_PLAYER	globals.h	76;"	d
NAME_SNARE_PLAYER	globals.h	78;"	d
NAME_SNORE_PLAYER	globals.h	80;"	d
NAME_SNOW_PLAYER	globals.h	79;"	d
NOT_THIS_RANK	globals.h	22;"	d
N_COLOR	globals.h	5;"	d
N_FIGURE	globals.h	6;"	d
N_FLOP	globals.h	17;"	d
N_HAND	globals.h	16;"	d
N_HTL	globals.h	19;"	d
N_RIVER	globals.h	97;"	d
N_START_HAND	globals.h	104;"	d
N_TURN	globals.h	96;"	d
PAIR	globals.h	24;"	d
PID_FLOP_RAISER	globals.h	74;"	d
PID_FOLD_PLAYER	globals.h	68;"	d
PID_HUMAN_PLAYER	globals.h	66;"	d
PID_SHREWD_PLAYER	globals.h	71;"	d
PID_SIMU_PLAYER	globals.h	67;"	d
PID_SNARE_PLAYER	globals.h	69;"	d
PID_SNARL_PLAYER	globals.h	70;"	d
PID_SNORE_PLAYER	globals.h	73;"	d
PID_SNOW_PLAYER	globals.h	72;"	d
Player	player.h	/^class Player$/;"	c
Player::SBlindId	player.h	/^	string SBlindId;$/;"	m	class:Player	access:public
Player::action	player.h	/^	vector<Action> action[MAX_PLAYER];$/;"	m	class:Player	access:public
Player::bigBlind	player.h	/^	int bigBlind;$/;"	m	class:Player	access:public
Player::cntRd	player.h	/^	int cntRd;$/;"	m	class:Player	access:public
Player::comm	player.h	/^	vector<Card> comm;$/;"	m	class:Player	access:public
Player::findIndex	player.cpp	/^int Player::findIndex(string pid)$/;"	f	class:Player	signature:(string pid)
Player::findIndex	player.h	/^	int findIndex(string pid);$/;"	p	class:Player	access:public	signature:(string pid)
Player::getInPlayers	player.cpp	/^int Player::getInPlayers()$/;"	f	class:Player	signature:()
Player::getInPlayers	player.h	/^	int getInPlayers();$/;"	p	class:Player	access:public	signature:()
Player::getLeastBuyin	player.cpp	/^int Player::getLeastBuyin()$/;"	f	class:Player	signature:()
Player::getLeastBuyin	player.h	/^	int getLeastBuyin();$/;"	p	class:Player	access:public	signature:()
Player::getPotOdds	player.cpp	/^float Player::getPotOdds()$/;"	f	class:Player	signature:()
Player::getPotOdds	player.h	/^	float getPotOdds();$/;"	p	class:Player	access:public	signature:()
Player::getStartJetton	player.cpp	/^int Player::getStartJetton()$/;"	f	class:Player	signature:()
Player::getStartJetton	player.h	/^	int getStartJetton();$/;"	p	class:Player	access:public	signature:()
Player::hole	player.h	/^	vector<Card> hole;$/;"	m	class:Player	access:public
Player::inBet	player.h	/^	int inBet;$/;"	m	class:Player	access:public
Player::init	player.cpp	/^void Player::init()$/;"	f	class:Player	signature:()
Player::init	player.h	/^	void init(); \/\/clear vectors at the start of a game$/;"	p	class:Player	access:public	signature:()
Player::isAfterSB	player.cpp	/^bool Player::isAfterSB(string thePid)$/;"	f	class:Player	signature:(string thePid)
Player::isAfterSB	player.h	/^	bool isAfterSB(string thePid);$/;"	p	class:Player	access:public	signature:(string thePid)
Player::isThisRd	player.cpp	/^bool Player::isThisRd(string pid)$/;"	f	class:Player	signature:(string pid)
Player::isThisRd	player.h	/^	bool isThisRd(string pid);$/;"	p	class:Player	access:public	signature:(string pid)
Player::jetton	player.h	/^	int jetton;$/;"	m	class:Player	access:public
Player::lastNotify	player.h	/^	int lastNotify;$/;"	m	class:Player	access:public
Player::lastrd	player.h	/^	vector<RdState> lastrd;$/;"	m	class:Player	access:public
Player::lstRdBet	player.h	/^	int lstRdBet;$/;"	m	class:Player	access:public
Player::lstRdJet	player.h	/^	int lstRdJet;$/;"	m	class:Player	access:public
Player::money	player.h	/^	int money;$/;"	m	class:Player	access:public
Player::name	player.h	/^	string name;$/;"	m	class:Player	access:public
Player::opHole	player.h	/^	vector<Card> opHole[MAX_PLAYER];$/;"	m	class:Player	access:public
Player::phand	player.h	/^	int phand[MAX_PLAYER];$/;"	m	class:Player	access:public
Player::pid	player.h	/^	string pid;$/;"	m	class:Player	access:public
Player::pot	player.h	/^	int pot;$/;"	m	class:Player	access:public
Player::potsh	player.h	/^	int potsh[MAX_PLAYER];$/;"	m	class:Player	access:public
Player::pstate	player.h	/^	vector<PlayerInfo> pstate;$/;"	m	class:Player	access:public
Player::rcvFlop	player.cpp	/^void Player::rcvFlop(vector<Card> flop)$/;"	f	class:Player	signature:(vector<Card> flop)
Player::rcvFlop	player.h	/^	void rcvFlop(vector<Card> flop); \/\/start set state=flop, end state++$/;"	p	class:Player	access:public	signature:(vector<Card> flop)
Player::rcvHole	player.cpp	/^void Player::rcvHole(vector<Card> hole)$/;"	f	class:Player	signature:(vector<Card> hole)
Player::rcvHole	player.h	/^	void rcvHole(vector<Card> hole);$/;"	p	class:Player	access:public	signature:(vector<Card> hole)
Player::rcvLstRound	player.cpp	/^void Player::rcvLstRound(vector<RdState> lastrd)$/;"	f	class:Player	signature:(vector<RdState> lastrd)
Player::rcvLstRound	player.h	/^	void rcvLstRound(vector<RdState> lastrd);$/;"	p	class:Player	access:public	signature:(vector<RdState> lastrd)
Player::rcvOppoAct	player.cpp	/^void Player::rcvOppoAct(string pid, Action act)$/;"	f	class:Player	signature:(string pid, Action act)
Player::rcvOppoAct	player.h	/^	void rcvOppoAct(string pid, Action act);$/;"	p	class:Player	access:public	signature:(string pid, Action act)
Player::rcvPHand	player.cpp	/^void Player::rcvPHand(string pid, int hand)$/;"	f	class:Player	signature:(string pid, int hand)
Player::rcvPHand	player.h	/^	void rcvPHand(string pid, int hand);$/;"	p	class:Player	access:public	signature:(string pid, int hand)
Player::rcvPHole	player.cpp	/^void Player::rcvPHole(string pid, Card card)$/;"	f	class:Player	signature:(string pid, Card card)
Player::rcvPHole	player.h	/^	void rcvPHole(string pid, Card card);$/;"	p	class:Player	access:public	signature:(string pid, Card card)
Player::rcvPot	player.cpp	/^void Player::rcvPot(int pot)$/;"	f	class:Player	signature:(int pot)
Player::rcvPot	player.h	/^	void rcvPot(int pot);$/;"	p	class:Player	access:public	signature:(int pot)
Player::rcvPotwin	player.cpp	/^void Player::rcvPotwin(string pid, int share)$/;"	f	class:Player	signature:(string pid, int share)
Player::rcvPotwin	player.h	/^	void rcvPotwin(string pid, int share);$/;"	p	class:Player	access:public	signature:(string pid, int share)
Player::rcvRiver	player.cpp	/^void Player::rcvRiver(Card card)$/;"	f	class:Player	signature:(Card card)
Player::rcvRiver	player.h	/^	void rcvRiver(Card card);$/;"	p	class:Player	access:public	signature:(Card card)
Player::rcvSeat	player.cpp	/^void Player::rcvSeat(vector<PlayerInfo> players)$/;"	f	class:Player	signature:(vector<PlayerInfo> players)
Player::rcvSeat	player.h	/^	void rcvSeat(vector<PlayerInfo> players); \/\/blind is a oppo action$/;"	p	class:Player	access:public	signature:(vector<PlayerInfo> players)
Player::rcvTurn	player.cpp	/^void Player::rcvTurn(Card card)$/;"	f	class:Player	signature:(Card card)
Player::rcvTurn	player.h	/^	void rcvTurn(Card card);$/;"	p	class:Player	access:public	signature:(Card card)
Player::reflect	player.cpp	/^void Player::reflect()$/;"	f	class:Player	signature:()
Player::reflect	player.h	/^	virtual void reflect();$/;"	p	class:Player	access:public	signature:()
Player::sendBet	player.h	/^	virtual Action sendBet()=0; \/\/the way player bets differ $/;"	p	class:Player	access:public	signature:()
Player::sendReg	player.cpp	/^vector<string> Player::sendReg()$/;"	f	class:Player	signature:()
Player::sendReg	player.h	/^	vector<string> sendReg();$/;"	p	class:Player	access:public	signature:()
Player::setReg	player.cpp	/^void Player::setReg(char* pid, char* name)$/;"	f	class:Player	signature:(char* pid, char* name)
Player::setReg	player.h	/^	void setReg(char* pid, char* name);$/;"	p	class:Player	access:public	signature:(char* pid, char* name)
Player::shareOfPot	player.h	/^	vector<int> shareOfPot;$/;"	m	class:Player	access:public
Player::state	player.h	/^	int state;$/;"	m	class:Player	access:public
Player::tmp	player.h	/^	bool tmp;$/;"	m	class:Player	access:public
Player::type	player.h	/^	int type;$/;"	m	class:Player	access:public
Player::~Player	player.cpp	/^Player::~Player()$/;"	f	class:Player	signature:()
Player::~Player	player.h	/^	virtual ~Player();$/;"	p	class:Player	access:public	signature:()
PlayerInfo	plyrinfo.cpp	/^PlayerInfo::PlayerInfo()$/;"	f	class:PlayerInfo	signature:()
PlayerInfo	plyrinfo.cpp	/^PlayerInfo::PlayerInfo(string pid, int jetton, int money)$/;"	f	class:PlayerInfo	signature:(string pid, int jetton, int money)
PlayerInfo	plyrinfo.h	/^	PlayerInfo();$/;"	p	class:PlayerInfo	access:public	signature:()
PlayerInfo	plyrinfo.h	/^	PlayerInfo(string pid, int jetton, int money);$/;"	p	class:PlayerInfo	access:public	signature:(string pid, int jetton, int money)
PlayerInfo	plyrinfo.h	/^class PlayerInfo$/;"	c
PlayerInfo::PlayerInfo	plyrinfo.cpp	/^PlayerInfo::PlayerInfo()$/;"	f	class:PlayerInfo	signature:()
PlayerInfo::PlayerInfo	plyrinfo.cpp	/^PlayerInfo::PlayerInfo(string pid, int jetton, int money)$/;"	f	class:PlayerInfo	signature:(string pid, int jetton, int money)
PlayerInfo::PlayerInfo	plyrinfo.h	/^	PlayerInfo();$/;"	p	class:PlayerInfo	access:public	signature:()
PlayerInfo::PlayerInfo	plyrinfo.h	/^	PlayerInfo(string pid, int jetton, int money);$/;"	p	class:PlayerInfo	access:public	signature:(string pid, int jetton, int money)
PlayerInfo::inGame	plyrinfo.h	/^	bool inGame;$/;"	m	class:PlayerInfo	access:public
PlayerInfo::jetton	plyrinfo.h	/^	int jetton;$/;"	m	class:PlayerInfo	access:public
PlayerInfo::match	plyrinfo.cpp	/^bool PlayerInfo::match(PlayerInfo* plyr)$/;"	f	class:PlayerInfo	signature:(PlayerInfo* plyr)
PlayerInfo::match	plyrinfo.h	/^	bool match(PlayerInfo* plyr);$/;"	p	class:PlayerInfo	access:public	signature:(PlayerInfo* plyr)
PlayerInfo::money	plyrinfo.h	/^	int money;$/;"	m	class:PlayerInfo	access:public
PlayerInfo::pid	plyrinfo.h	/^	string pid;$/;"	m	class:PlayerInfo	access:public
PlayerInfo::setPlayerInfo	plyrinfo.cpp	/^void PlayerInfo::setPlayerInfo(string pid, int jetton, int money)$/;"	f	class:PlayerInfo	signature:(string pid, int jetton, int money)
PlayerInfo::setPlayerInfo	plyrinfo.h	/^	void setPlayerInfo(string pid, int jetton, int money);$/;"	p	class:PlayerInfo	access:public	signature:(string pid, int jetton, int money)
PlayerShell	plyrshel.h	/^class PlayerShell$/;"	c
PlayerShell::init	plyrshel.cpp	/^void PlayerShell::init(int ch,char* pid,char* si,char* sp,char* ci,char* cp)$/;"	f	class:PlayerShell	signature:(int ch,char* pid,char* si,char* sp,char* ci,char* cp)
PlayerShell::init	plyrshel.h	/^	void init(int ch,char* id,char* si,char* sp,char* ci,char* cp); \/\/init$/;"	p	class:PlayerShell	access:public	signature:(int ch,char* id,char* si,char* sp,char* ci,char* cp)
PlayerShell::mailman	plyrshel.h	/^	Mailman mailman;$/;"	m	class:PlayerShell	access:public
PlayerShell::matchChar	plyrshel.cpp	/^void PlayerShell::matchChar(string& piece)$/;"	f	class:PlayerShell	signature:(string& piece)
PlayerShell::matchChar	plyrshel.h	/^	void matchChar(string& piece); \/\/return the string after cutting a char$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
PlayerShell::matchWord	plyrshel.cpp	/^void PlayerShell::matchWord(string& piece) $/;"	f	class:PlayerShell	signature:(string& piece)
PlayerShell::matchWord	plyrshel.h	/^	void matchWord(string& piece); \/\/return the string after cutting word<space>$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
PlayerShell::nextInt	plyrshel.cpp	/^int PlayerShell::nextInt(string& piece)$/;"	f	class:PlayerShell	signature:(string& piece)
PlayerShell::nextInt	plyrshel.h	/^	int nextInt(string& piece); \/\/shortens the string$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
PlayerShell::nextWord	plyrshel.cpp	/^string PlayerShell::nextWord(string& piece)$/;"	f	class:PlayerShell	signature:(string& piece)
PlayerShell::nextWord	plyrshel.h	/^	string nextWord(string& piece); \/\/delim by <space> or <colon>$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
PlayerShell::player	plyrshel.h	/^	Player* player;$/;"	m	class:PlayerShell	access:public
PlayerShell::readBlind	plyrshel.cpp	/^void PlayerShell::readBlind(string& message)$/;"	f	class:PlayerShell	signature:(string& message)
PlayerShell::readBlind	plyrshel.h	/^	void readBlind(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readFlop	plyrshel.cpp	/^void PlayerShell::readFlop(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
PlayerShell::readFlop	plyrshel.h	/^	void readFlop(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readHold	plyrshel.cpp	/^void PlayerShell::readHold(string& message)$/;"	f	class:PlayerShell	signature:(string& message)
PlayerShell::readHold	plyrshel.h	/^	void readHold(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readInquire	plyrshel.cpp	/^void PlayerShell::readInquire(string msg)$/;"	f	class:PlayerShell	signature:(string msg)
PlayerShell::readInquire	plyrshel.h	/^	void readInquire(string msg);$/;"	p	class:PlayerShell	access:public	signature:(string msg)
PlayerShell::readNotify	plyrshel.cpp	/^void PlayerShell::readNotify(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
PlayerShell::readNotify	plyrshel.h	/^	void readNotify(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readPotwin	plyrshel.cpp	/^void PlayerShell::readPotwin(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
PlayerShell::readPotwin	plyrshel.h	/^	void readPotwin(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readRiver	plyrshel.cpp	/^void PlayerShell::readRiver(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
PlayerShell::readRiver	plyrshel.h	/^	void readRiver(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readSeat	plyrshel.cpp	/^void PlayerShell::readSeat(string& message)$/;"	f	class:PlayerShell	signature:(string& message)
PlayerShell::readSeat	plyrshel.h	/^	void readSeat(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readShowdown	plyrshel.cpp	/^void PlayerShell::readShowdown(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
PlayerShell::readShowdown	plyrshel.h	/^	void readShowdown(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::readTurn	plyrshel.cpp	/^void PlayerShell::readTurn(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
PlayerShell::readTurn	plyrshel.h	/^	void readTurn(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
PlayerShell::start	plyrshel.cpp	/^void PlayerShell::start()$/;"	f	class:PlayerShell	signature:()
PlayerShell::start	plyrshel.h	/^	void start();$/;"	p	class:PlayerShell	access:public	signature:()
PlayerShell::sticky	plyrshel.cpp	/^string PlayerShell::sticky(string& message, string header)$/;"	f	class:PlayerShell	signature:(string& message, string header)
PlayerShell::sticky	plyrshel.h	/^	string sticky(string& message, string header);$/;"	p	class:PlayerShell	access:private	signature:(string& message, string header)
PlayerShell::writeAction	plyrshel.cpp	/^void PlayerShell::writeAction()$/;"	f	class:PlayerShell	signature:()
PlayerShell::writeAction	plyrshel.h	/^	void writeAction();$/;"	p	class:PlayerShell	access:public	signature:()
PlayerShell::writeReg	plyrshel.cpp	/^void PlayerShell::writeReg()$/;"	f	class:PlayerShell	signature:()
PlayerShell::writeReg	plyrshel.h	/^	void writeReg();$/;"	p	class:PlayerShell	access:public	signature:()
PlayerShell::~PlayerShell	plyrshel.cpp	/^PlayerShell::~PlayerShell()$/;"	f	class:PlayerShell	signature:()
PlayerShell::~PlayerShell	plyrshel.h	/^	~PlayerShell();$/;"	p	class:PlayerShell	access:public	signature:()
RIVER	globals.h	41;"	d
R_BET	globals.h	42;"	d
RdState	rdstate.cpp	/^RdState::RdState(string pid, int jetton, int money, int inBet, int lastAct, int state)$/;"	f	class:RdState	signature:(string pid, int jetton, int money, int inBet, int lastAct, int state)
RdState	rdstate.h	/^	RdState(string,int,int,int,int,int);$/;"	p	class:RdState	access:public	signature:(string,int,int,int,int,int)
RdState	rdstate.h	/^class RdState$/;"	c
RdState::RdState	rdstate.cpp	/^RdState::RdState(string pid, int jetton, int money, int inBet, int lastAct, int state)$/;"	f	class:RdState	signature:(string pid, int jetton, int money, int inBet, int lastAct, int state)
RdState::RdState	rdstate.h	/^	RdState(string,int,int,int,int,int);$/;"	p	class:RdState	access:public	signature:(string,int,int,int,int,int)
RdState::inBet	rdstate.h	/^	int inBet;$/;"	m	class:RdState	access:public
RdState::jetton	rdstate.h	/^	int jetton;$/;"	m	class:RdState	access:public
RdState::lastAct	rdstate.h	/^	int lastAct;$/;"	m	class:RdState	access:public
RdState::money	rdstate.h	/^	int money;$/;"	m	class:RdState	access:public
RdState::pid	rdstate.h	/^	string pid;$/;"	m	class:RdState	access:public
RdState::state	rdstate.h	/^	int state; \/\/in which round is last act$/;"	m	class:RdState	access:public
SBLIND_INDEX	globals.h	99;"	d
SBlindId	player.h	/^	string SBlindId;$/;"	m	class:Player	access:public
SEAT_BIG_BLIND	globals.h	51;"	d
SEAT_BUTTON	globals.h	50;"	d
SEAT_NOT_BLIND	globals.h	53;"	d
SEAT_SMALL_BLIND	globals.h	52;"	d
SHUFFLE	globals.h	34;"	d
SPADE	globals.h	/^typedef enum{ CLUB, DIAMOND, HEART, SPADE }Color;$/;"	e	enum:__anon1
STRAIGHT	globals.h	27;"	d
STRAIGHTFLUSH	globals.h	31;"	d
STR_ALLIN	globals.h	92;"	d
STR_CALL	globals.h	90;"	d
STR_CHECK	globals.h	89;"	d
STR_FOLD	globals.h	93;"	d
STR_RAISE	globals.h	91;"	d
ShrewdPlayer	shrewdpl.cpp	/^ShrewdPlayer::ShrewdPlayer(string pid)$/;"	f	class:ShrewdPlayer	signature:(string pid)
ShrewdPlayer	shrewdpl.h	/^	ShrewdPlayer(string pid);$/;"	p	class:ShrewdPlayer	access:public	signature:(string pid)
ShrewdPlayer	shrewdpl.h	/^class ShrewdPlayer: public Player$/;"	c	inherits:Player
ShrewdPlayer::ShrewdPlayer	shrewdpl.cpp	/^ShrewdPlayer::ShrewdPlayer(string pid)$/;"	f	class:ShrewdPlayer	signature:(string pid)
ShrewdPlayer::ShrewdPlayer	shrewdpl.h	/^	ShrewdPlayer(string pid);$/;"	p	class:ShrewdPlayer	access:public	signature:(string pid)
ShrewdPlayer::dealBet	shrewdpl.cpp	/^Action ShrewdPlayer::dealBet()$/;"	f	class:ShrewdPlayer	signature:()
ShrewdPlayer::dealBet	shrewdpl.h	/^	Action dealBet();$/;"	p	class:ShrewdPlayer	access:private	signature:()
ShrewdPlayer::flopBet	shrewdpl.cpp	/^Action ShrewdPlayer::flopBet()$/;"	f	class:ShrewdPlayer	signature:()
ShrewdPlayer::flopBet	shrewdpl.h	/^	Action flopBet();$/;"	p	class:ShrewdPlayer	access:private	signature:()
ShrewdPlayer::getEE	shrewdpl.h	/^	float getEE();$/;"	p	class:ShrewdPlayer	access:private	signature:()
ShrewdPlayer::getLeastRaise	shrewdpl.h	/^	int getLeastRaise();$/;"	p	class:ShrewdPlayer	access:private	signature:()
ShrewdPlayer::getPoint	shrewdpl.h	/^	int getPoint();$/;"	p	class:ShrewdPlayer	access:private	signature:()
ShrewdPlayer::sendBet	shrewdpl.cpp	/^Action ShrewdPlayer::sendBet()$/;"	f	class:ShrewdPlayer	signature:()
ShrewdPlayer::sendBet	shrewdpl.h	/^	Action sendBet();$/;"	p	class:ShrewdPlayer	access:public	signature:()
Simu	simu.h	/^class Simu$/;"	c
Simu::deck	simu.h	/^	vector<Card> deck; \/\/a real deck for dealing$/;"	m	class:Simu	access:public
Simu::initDeck	simu.cpp	/^void Simu::initDeck()$/;"	f	class:Simu	signature:()
Simu::initDeck	simu.h	/^	void initDeck();$/;"	p	class:Simu	access:public	signature:()
Simu::nPlayers	simu.h	/^	int nPlayers; \/\/num of players$/;"	m	class:Simu	access:public
Simu::printDeck	simu.cpp	/^void Simu::printDeck()$/;"	f	class:Simu	signature:()
Simu::printDeck	simu.h	/^	void printDeck(); \/\/for deck$/;"	p	class:Simu	access:public	signature:()
Simu::setPlayers	simu.cpp	/^void Simu::setPlayers(int nPlayers)$/;"	f	class:Simu	signature:(int nPlayers)
Simu::setPlayers	simu.h	/^	void setPlayers(int nPlayers); \/\/for nPlayers$/;"	p	class:Simu	access:public	signature:(int nPlayers)
Simu::shuffle	simu.cpp	/^void Simu::shuffle()$/;"	f	class:Simu	signature:()
Simu::shuffle	simu.h	/^	void shuffle(); $/;"	p	class:Simu	access:public	signature:()
SimuPlayer	simuplayer.cpp	/^SimuPlayer::SimuPlayer()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer	simuplayer.h	/^	SimuPlayer();$/;"	p	class:SimuPlayer	access:public	signature:()
SimuPlayer	simuplayer.h	/^class SimuPlayer: public Simu$/;"	c	inherits:Simu
SimuPlayer::SimuPlayer	simuplayer.cpp	/^SimuPlayer::SimuPlayer()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer::SimuPlayer	simuplayer.h	/^	SimuPlayer();$/;"	p	class:SimuPlayer	access:public	signature:()
SimuPlayer::comm	simuplayer.h	/^	vector<Card> comm; \/\/common card$/;"	m	class:SimuPlayer	access:private
SimuPlayer::deal	simuplayer.cpp	/^void SimuPlayer::deal()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer::deal	simuplayer.h	/^	void deal(); \/\/deal to other players: called multiple times$/;"	p	class:SimuPlayer	access:private	signature:()
SimuPlayer::dealNextUnseen	simuplayer.cpp	/^void SimuPlayer::dealNextUnseen(vector<Card>& vec)$/;"	f	class:SimuPlayer	signature:(vector<Card>& vec)
SimuPlayer::dealNextUnseen	simuplayer.h	/^	void dealNextUnseen(vector<Card>& vec);$/;"	p	class:SimuPlayer	access:private	signature:(vector<Card>& vec)
SimuPlayer::flop	simuplayer.cpp	/^void SimuPlayer::flop()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer::flop	simuplayer.h	/^	void flop();$/;"	p	class:SimuPlayer	access:private	signature:()
SimuPlayer::hole	simuplayer.h	/^	vector<Card> hole; \/\/hole card of main player$/;"	m	class:SimuPlayer	access:private
SimuPlayer::isWin	simuplayer.cpp	/^bool SimuPlayer::isWin()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer::isWin	simuplayer.h	/^	bool isWin(); $/;"	p	class:SimuPlayer	access:private	signature:()
SimuPlayer::mainWin	simuplayer.h	/^	bool mainWin;$/;"	m	class:SimuPlayer	access:private
SimuPlayer::myHand	simuplayer.h	/^	Hand myHand;$/;"	m	class:SimuPlayer	access:private
SimuPlayer::oppoHand	simuplayer.h	/^	vector<Hand> oppoHand;$/;"	m	class:SimuPlayer	access:private
SimuPlayer::oppoHole	simuplayer.h	/^	vector<Card> oppoHole; \/\/hole card of opponents: 2*nPlayers-2$/;"	m	class:SimuPlayer	access:private
SimuPlayer::print	simuplayer.cpp	/^void SimuPlayer::print()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer::print	simuplayer.h	/^	void print();$/;"	p	class:SimuPlayer	access:public	signature:()
SimuPlayer::reco	simuplayer.h	/^	vector<Card> reco;$/;"	m	class:SimuPlayer	access:private
SimuPlayer::river	simuplayer.cpp	/^void SimuPlayer::river()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer::river	simuplayer.h	/^	void river();$/;"	p	class:SimuPlayer	access:private	signature:()
SimuPlayer::seen	simuplayer.h	/^	vector<Card> seen; \/\/all seen cards in comm and hole$/;"	m	class:SimuPlayer	access:private
SimuPlayer::setState	simuplayer.cpp	/^void SimuPlayer::setState(int state, vector<Card> hole, vector<Card> comm)$/;"	f	class:SimuPlayer	signature:(int state, vector<Card> hole, vector<Card> comm)
SimuPlayer::setState	simuplayer.h	/^	void setState(int state, vector<Card> hole, vector<Card> comm);$/;"	p	class:SimuPlayer	access:public	signature:(int state, vector<Card> hole, vector<Card> comm)
SimuPlayer::simulate	simuplayer.cpp	/^float SimuPlayer::simulate(int times)$/;"	f	class:SimuPlayer	signature:(int times)
SimuPlayer::simulate	simuplayer.h	/^	float simulate(int times);$/;"	p	class:SimuPlayer	access:public	signature:(int times)
SimuPlayer::state	simuplayer.h	/^	int state; \/\/state of the game$/;"	m	class:SimuPlayer	access:private
SimuPlayer::turn	simuplayer.cpp	/^void SimuPlayer::turn()$/;"	f	class:SimuPlayer	signature:()
SimuPlayer::turn	simuplayer.h	/^	void turn();$/;"	p	class:SimuPlayer	access:private	signature:()
SnorePlayer	snorepl.cpp	/^SnorePlayer::SnorePlayer(string pid)$/;"	f	class:SnorePlayer	signature:(string pid)
SnorePlayer	snorepl.h	/^	SnorePlayer(string pid);$/;"	p	class:SnorePlayer	access:public	signature:(string pid)
SnorePlayer	snorepl.h	/^class SnorePlayer: public Player$/;"	c	inherits:Player
SnorePlayer::SnorePlayer	snorepl.cpp	/^SnorePlayer::SnorePlayer(string pid)$/;"	f	class:SnorePlayer	signature:(string pid)
SnorePlayer::SnorePlayer	snorepl.h	/^	SnorePlayer(string pid);$/;"	p	class:SnorePlayer	access:public	signature:(string pid)
SnorePlayer::dealBet	snorepl.cpp	/^Action SnorePlayer::dealBet()$/;"	f	class:SnorePlayer	signature:()
SnorePlayer::dealBet	snorepl.h	/^	Action dealBet();$/;"	p	class:SnorePlayer	access:private	signature:()
SnorePlayer::flopBet	snorepl.cpp	/^Action SnorePlayer::flopBet()$/;"	f	class:SnorePlayer	signature:()
SnorePlayer::flopBet	snorepl.h	/^	Action flopBet();$/;"	p	class:SnorePlayer	access:private	signature:()
SnorePlayer::getEE	snorepl.h	/^	float getEE();$/;"	p	class:SnorePlayer	access:private	signature:()
SnorePlayer::getLeastRaise	snorepl.h	/^	int getLeastRaise();$/;"	p	class:SnorePlayer	access:private	signature:()
SnorePlayer::getPoint	snorepl.h	/^	int getPoint();$/;"	p	class:SnorePlayer	access:private	signature:()
SnorePlayer::sendBet	snorepl.cpp	/^Action SnorePlayer::sendBet()$/;"	f	class:SnorePlayer	signature:()
SnorePlayer::sendBet	snorepl.h	/^	Action sendBet();$/;"	p	class:SnorePlayer	access:public	signature:()
StartHand	shand.h	/^class StartHand$/;"	c
StartHand::figure	shand.h	/^	int figure[HOLE_SIZE];$/;"	m	class:StartHand	access:public
StartHand::isSuited	shand.h	/^	bool isSuited;$/;"	m	class:StartHand	access:public
StartHand::pwin	shand.h	/^	float pwin;$/;"	m	class:StartHand	access:public
TRIP	globals.h	26;"	d
TURN	globals.h	39;"	d
TWOPAIRS	globals.h	25;"	d
T_BET	globals.h	40;"	d
UTG_INDEX	globals.h	101;"	d
_ACTION_H_	action.h	2;"	d
_CARD_H_	card.h	2;"	d
_CHECK_PLUS_H_	checkplus.h	2;"	d
_CONTROLLER_H_	plyrshel.h	2;"	d
_GLOBALS_H_	globals.h	2;"	d
_HAND_H_	hand.h	2;"	d
_MAIL_MAN_H_	mailman.h	2;"	d
_PLAYER_H_	player.h	2;"	d
_PLAYER_INFO_H_	plyrinfo.h	2;"	d
_ROUND_STATE_H_	rdstate.h	2;"	d
_SHREWD_PLAYER_H_	shrewdpl.h	2;"	d
_SIMU_H_	simu.h	2;"	d
_SIMU_PLAYER_H_	simuplayer.h	2;"	d
_SNORE_PLAYER_H_	snorepl.h	2;"	d
_STARTING_HAND_H_	shand.h	2;"	d
act	action.h	/^	int act;$/;"	m	class:Action	access:public
action	player.h	/^	vector<Action> action[MAX_PLAYER];$/;"	m	class:Player	access:public
bet	action.h	/^	int bet;$/;"	m	class:Action	access:public
bigBlind	player.h	/^	int bigBlind;$/;"	m	class:Player	access:public
bindCon	mailman.cpp	/^void Mailman::bindCon()$/;"	f	class:Mailman	signature:()
bindCon	mailman.h	/^	void bindCon();$/;"	p	class:Mailman	access:public	signature:()
checkFlush	checkplus.cpp	/^bool CheckerPlus::checkFlush(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkFlush	checkplus.h	/^	static bool checkFlush(vector<Card> hand, Hand& ret); \/\/color leading$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkFour	checkplus.cpp	/^bool CheckerPlus::checkFour(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkFour	checkplus.h	/^	static bool checkFour(vector<Card> hand, Hand& ret); \/\/repeat$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkFullHouse	checkplus.cpp	/^bool CheckerPlus::checkFullHouse(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkFullHouse	checkplus.h	/^	static bool checkFullHouse(vector<Card> hand, Hand& ret); \/\/trip two$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkHand	checkplus.cpp	/^Hand CheckerPlus::checkHand(vector<Card> handcard)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard)
checkHand	checkplus.h	/^	static Hand checkHand(vector<Card> hand);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand)
checkHighCard	checkplus.cpp	/^bool CheckerPlus::checkHighCard(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkHighCard	checkplus.h	/^	static bool checkHighCard(vector<Card> hand, Hand& ret);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkPair	checkplus.cpp	/^bool CheckerPlus::checkPair(vector<Card> handcard, Hand& ret) $/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkPair	checkplus.h	/^	static bool checkPair(vector<Card> hand, Hand& ret) ; \/\/repeat$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkStraight	checkplus.cpp	/^bool CheckerPlus::checkStraight(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkStraight	checkplus.h	/^	static bool checkStraight(vector<Card> hand, Hand& ret); \/\/start$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkStraightFlush	checkplus.cpp	/^bool CheckerPlus::checkStraightFlush(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkStraightFlush	checkplus.h	/^	static bool checkStraightFlush(vector<Card> hand, Hand& ret); $/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkTrip	checkplus.cpp	/^bool CheckerPlus::checkTrip(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkTrip	checkplus.h	/^	static bool checkTrip(vector<Card> hand, Hand& ret); \/\/repeat$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
checkTwoPairs	checkplus.cpp	/^bool CheckerPlus::checkTwoPairs(vector<Card> handcard, Hand& ret)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard, Hand& ret)
checkTwoPairs	checkplus.h	/^	static bool checkTwoPairs(vector<Card> hand, Hand& ret); \/\/higher lower$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> hand, Hand& ret)
client_addr	mailman.h	/^    struct sockaddr_in client_addr; $/;"	m	class:Mailman	typeref:struct:Mailman::sockaddr_in	access:public
client_ip	mailman.h	/^	char client_ip[MAXLEN], client_port[MAXLEN];$/;"	m	class:Mailman	access:public
client_port	mailman.h	/^	char client_ip[MAXLEN], client_port[MAXLEN];$/;"	m	class:Mailman	access:public
closeCon	mailman.cpp	/^void Mailman::closeCon()$/;"	f	class:Mailman	signature:()
closeCon	mailman.h	/^	void closeCon();$/;"	p	class:Mailman	access:public	signature:()
cntRd	player.h	/^	int cntRd;$/;"	m	class:Player	access:public
color	card.h	/^	int color; \/\/As Color$/;"	m	class:Card	access:public
color	checkplus.h	/^	int color;$/;"	m	class:FigCnt	access:public
comm	player.h	/^	vector<Card> comm;$/;"	m	class:Player	access:public
comm	simuplayer.h	/^	vector<Card> comm; \/\/common card$/;"	m	class:SimuPlayer	access:private
commDiff	checkplus.h	/^	static vector<int> commDiff;$/;"	m	class:CheckerPlus	access:private
compare	hand.cpp	/^int Hand::compare(Hand* hand)$/;"	f	class:Hand	signature:(Hand* hand)
compare	hand.h	/^	int compare(Hand* hand);$/;"	p	class:Hand	access:public	signature:(Hand* hand)
connectCon	mailman.cpp	/^void Mailman::connectCon()$/;"	f	class:Mailman	signature:()
connectCon	mailman.h	/^	void connectCon();$/;"	p	class:Mailman	access:public	signature:()
deal	simuplayer.cpp	/^void SimuPlayer::deal()$/;"	f	class:SimuPlayer	signature:()
deal	simuplayer.h	/^	void deal(); \/\/deal to other players: called multiple times$/;"	p	class:SimuPlayer	access:private	signature:()
dealBet	shrewdpl.cpp	/^Action ShrewdPlayer::dealBet()$/;"	f	class:ShrewdPlayer	signature:()
dealBet	shrewdpl.h	/^	Action dealBet();$/;"	p	class:ShrewdPlayer	access:private	signature:()
dealBet	snorepl.cpp	/^Action SnorePlayer::dealBet()$/;"	f	class:SnorePlayer	signature:()
dealBet	snorepl.h	/^	Action dealBet();$/;"	p	class:SnorePlayer	access:private	signature:()
dealNextUnseen	simuplayer.cpp	/^void SimuPlayer::dealNextUnseen(vector<Card>& vec)$/;"	f	class:SimuPlayer	signature:(vector<Card>& vec)
dealNextUnseen	simuplayer.h	/^	void dealNextUnseen(vector<Card>& vec);$/;"	p	class:SimuPlayer	access:private	signature:(vector<Card>& vec)
deck	simu.h	/^	vector<Card> deck; \/\/a real deck for dealing$/;"	m	class:Simu	access:public
dout	shrewdpl.cpp	/^ofstream dout;$/;"	v
dout	snorepl.cpp	/^static ofstream dout;$/;"	v	file:
figCnt	checkplus.h	/^	static vector<FigCnt> figCnt;$/;"	m	class:CheckerPlus	access:private
figure	card.h	/^	int figure; \/\/2~14$/;"	m	class:Card	access:public
figure	checkplus.h	/^	int figure;$/;"	m	class:FigCnt	access:public
figure	shand.h	/^	int figure[HOLE_SIZE];$/;"	m	class:StartHand	access:public
findIndex	player.cpp	/^int Player::findIndex(string pid)$/;"	f	class:Player	signature:(string pid)
findIndex	player.h	/^	int findIndex(string pid);$/;"	p	class:Player	access:public	signature:(string pid)
findMostColor	checkplus.cpp	/^void CheckerPlus::findMostColor(vector<Card> handcard,int& mostColor,int& theColor)$/;"	f	class:CheckerPlus	signature:(vector<Card> handcard,int& mostColor,int& theColor)
findMostColor	checkplus.h	/^	static void findMostColor(vector<Card> handcard, int& mostColor, int& theColor);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card> handcard, int& mostColor, int& theColor)
first	hand.h	/^	vector<int> first;$/;"	m	class:Hand	access:public
flop	simuplayer.cpp	/^void SimuPlayer::flop()$/;"	f	class:SimuPlayer	signature:()
flop	simuplayer.h	/^	void flop();$/;"	p	class:SimuPlayer	access:private	signature:()
flopBet	shrewdpl.cpp	/^Action ShrewdPlayer::flopBet()$/;"	f	class:ShrewdPlayer	signature:()
flopBet	shrewdpl.h	/^	Action flopBet();$/;"	p	class:ShrewdPlayer	access:private	signature:()
flopBet	snorepl.cpp	/^Action SnorePlayer::flopBet()$/;"	f	class:SnorePlayer	signature:()
flopBet	snorepl.h	/^	Action flopBet();$/;"	p	class:SnorePlayer	access:private	signature:()
fout	plyrshel.cpp	/^ofstream fout;$/;"	v
getCard	card.cpp	/^Card Card::getCard(char color, int figure)$/;"	f	class:Card	signature:(char color, int figure)
getCard	card.h	/^	static Card getCard(char color, int figure);$/;"	p	class:Card	access:public	signature:(char color, int figure)
getEE	shrewdpl.h	/^	float getEE();$/;"	p	class:ShrewdPlayer	access:private	signature:()
getEE	snorepl.h	/^	float getEE();$/;"	p	class:SnorePlayer	access:private	signature:()
getInPlayers	player.cpp	/^int Player::getInPlayers()$/;"	f	class:Player	signature:()
getInPlayers	player.h	/^	int getInPlayers();$/;"	p	class:Player	access:public	signature:()
getLeastBuyin	player.cpp	/^int Player::getLeastBuyin()$/;"	f	class:Player	signature:()
getLeastBuyin	player.h	/^	int getLeastBuyin();$/;"	p	class:Player	access:public	signature:()
getLeastRaise	shrewdpl.h	/^	int getLeastRaise();$/;"	p	class:ShrewdPlayer	access:private	signature:()
getLeastRaise	snorepl.h	/^	int getLeastRaise();$/;"	p	class:SnorePlayer	access:private	signature:()
getMsg	mailman.cpp	/^string Mailman::getMsg()$/;"	f	class:Mailman	signature:()
getMsg	mailman.h	/^	string getMsg();$/;"	p	class:Mailman	access:public	signature:()
getPoint	shrewdpl.h	/^	int getPoint();$/;"	p	class:ShrewdPlayer	access:private	signature:()
getPoint	snorepl.h	/^	int getPoint();$/;"	p	class:SnorePlayer	access:private	signature:()
getPotOdds	player.cpp	/^float Player::getPotOdds()$/;"	f	class:Player	signature:()
getPotOdds	player.h	/^	float getPotOdds();$/;"	p	class:Player	access:public	signature:()
getStartJetton	player.cpp	/^int Player::getStartJetton()$/;"	f	class:Player	signature:()
getStartJetton	player.h	/^	int getStartJetton();$/;"	p	class:Player	access:public	signature:()
hole	player.h	/^	vector<Card> hole;$/;"	m	class:Player	access:public
hole	simuplayer.h	/^	vector<Card> hole; \/\/hole card of main player$/;"	m	class:SimuPlayer	access:private
inBet	player.h	/^	int inBet;$/;"	m	class:Player	access:public
inBet	rdstate.h	/^	int inBet;$/;"	m	class:RdState	access:public
inGame	plyrinfo.h	/^	bool inGame;$/;"	m	class:PlayerInfo	access:public
init	mailman.cpp	/^void Mailman::init(char* si, char* sp, char* ci, char* cp)$/;"	f	class:Mailman	signature:(char* si, char* sp, char* ci, char* cp)
init	mailman.h	/^	void init(char* si, char* sp, char* ci, char* cp);$/;"	p	class:Mailman	access:public	signature:(char* si, char* sp, char* ci, char* cp)
init	player.cpp	/^void Player::init()$/;"	f	class:Player	signature:()
init	player.h	/^	void init(); \/\/clear vectors at the start of a game$/;"	p	class:Player	access:public	signature:()
init	plyrshel.cpp	/^void PlayerShell::init(int ch,char* pid,char* si,char* sp,char* ci,char* cp)$/;"	f	class:PlayerShell	signature:(int ch,char* pid,char* si,char* sp,char* ci,char* cp)
init	plyrshel.h	/^	void init(int ch,char* id,char* si,char* sp,char* ci,char* cp); \/\/init$/;"	p	class:PlayerShell	access:public	signature:(int ch,char* id,char* si,char* sp,char* ci,char* cp)
initDeck	simu.cpp	/^void Simu::initDeck()$/;"	f	class:Simu	signature:()
initDeck	simu.h	/^	void initDeck();$/;"	p	class:Simu	access:public	signature:()
inputCard	card.cpp	/^Card Card::inputCard()$/;"	f	class:Card	signature:()
inputCard	card.h	/^	static Card inputCard();$/;"	p	class:Card	access:public	signature:()
is	card.cpp	/^bool Card::is(Card card)$/;"	f	class:Card	signature:(Card card)
is	card.h	/^	bool is(Card card);$/;"	p	class:Card	access:public	signature:(Card card)
isAfterSB	player.cpp	/^bool Player::isAfterSB(string thePid)$/;"	f	class:Player	signature:(string thePid)
isAfterSB	player.h	/^	bool isAfterSB(string thePid);$/;"	p	class:Player	access:public	signature:(string thePid)
isSuited	shand.h	/^	bool isSuited;$/;"	m	class:StartHand	access:public
isThisRd	player.cpp	/^bool Player::isThisRd(string pid)$/;"	f	class:Player	signature:(string pid)
isThisRd	player.h	/^	bool isThisRd(string pid);$/;"	p	class:Player	access:public	signature:(string pid)
isWin	simuplayer.cpp	/^bool SimuPlayer::isWin()$/;"	f	class:SimuPlayer	signature:()
isWin	simuplayer.h	/^	bool isWin(); $/;"	p	class:SimuPlayer	access:private	signature:()
jetton	player.h	/^	int jetton;$/;"	m	class:Player	access:public
jetton	plyrinfo.h	/^	int jetton;$/;"	m	class:PlayerInfo	access:public
jetton	rdstate.h	/^	int jetton;$/;"	m	class:RdState	access:public
lastAct	rdstate.h	/^	int lastAct;$/;"	m	class:RdState	access:public
lastNotify	player.h	/^	int lastNotify;$/;"	m	class:Player	access:public
lastrd	player.h	/^	vector<RdState> lastrd;$/;"	m	class:Player	access:public
lstRdBet	player.h	/^	int lstRdBet;$/;"	m	class:Player	access:public
lstRdJet	player.h	/^	int lstRdJet;$/;"	m	class:Player	access:public
mailman	plyrshel.h	/^	Mailman mailman;$/;"	m	class:PlayerShell	access:public
main	main.cpp	/^int main(int argc,char* argv[])$/;"	f	signature:(int argc,char* argv[])
mainWin	simuplayer.h	/^	bool mainWin;$/;"	m	class:SimuPlayer	access:private
match	plyrinfo.cpp	/^bool PlayerInfo::match(PlayerInfo* plyr)$/;"	f	class:PlayerInfo	signature:(PlayerInfo* plyr)
match	plyrinfo.h	/^	bool match(PlayerInfo* plyr);$/;"	p	class:PlayerInfo	access:public	signature:(PlayerInfo* plyr)
matchChar	plyrshel.cpp	/^void PlayerShell::matchChar(string& piece)$/;"	f	class:PlayerShell	signature:(string& piece)
matchChar	plyrshel.h	/^	void matchChar(string& piece); \/\/return the string after cutting a char$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
matchWord	plyrshel.cpp	/^void PlayerShell::matchWord(string& piece) $/;"	f	class:PlayerShell	signature:(string& piece)
matchWord	plyrshel.h	/^	void matchWord(string& piece); \/\/return the string after cutting word<space>$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
message	mailman.h	/^	char message[MAXDATASIZE];$/;"	m	class:Mailman	access:public
money	player.h	/^	int money;$/;"	m	class:Player	access:public
money	plyrinfo.h	/^	int money;$/;"	m	class:PlayerInfo	access:public
money	rdstate.h	/^	int money;$/;"	m	class:RdState	access:public
myHand	simuplayer.h	/^	Hand myHand;$/;"	m	class:SimuPlayer	access:private
nPlayers	simu.h	/^	int nPlayers; \/\/num of players$/;"	m	class:Simu	access:public
name	player.h	/^	string name;$/;"	m	class:Player	access:public
nextInt	plyrshel.cpp	/^int PlayerShell::nextInt(string& piece)$/;"	f	class:PlayerShell	signature:(string& piece)
nextInt	plyrshel.h	/^	int nextInt(string& piece); \/\/shortens the string$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
nextWord	plyrshel.cpp	/^string PlayerShell::nextWord(string& piece)$/;"	f	class:PlayerShell	signature:(string& piece)
nextWord	plyrshel.h	/^	string nextWord(string& piece); \/\/delim by <space> or <colon>$/;"	p	class:PlayerShell	access:private	signature:(string& piece)
nout	mailman.cpp	/^ofstream nout;$/;"	v
objects	makefile	/^objects=main.o plyrshel.o simuplayer.o player.o rdstate.o plyrinfo.o card.o mailman.o simu.o hand.o checkplus.o shrewdpl.o snorepl.o$/;"	m
opHole	player.h	/^	vector<Card> opHole[MAX_PLAYER];$/;"	m	class:Player	access:public
oppoHand	simuplayer.h	/^	vector<Hand> oppoHand;$/;"	m	class:SimuPlayer	access:private
oppoHole	simuplayer.h	/^	vector<Card> oppoHole; \/\/hole card of opponents: 2*nPlayers-2$/;"	m	class:SimuPlayer	access:private
phand	player.h	/^	int phand[MAX_PLAYER];$/;"	m	class:Player	access:public
pid	player.h	/^	string pid;$/;"	m	class:Player	access:public
pid	plyrinfo.h	/^	string pid;$/;"	m	class:PlayerInfo	access:public
pid	rdstate.h	/^	string pid;$/;"	m	class:RdState	access:public
player	plyrshel.h	/^	Player* player;$/;"	m	class:PlayerShell	access:public
pot	player.h	/^	int pot;$/;"	m	class:Player	access:public
potsh	player.h	/^	int potsh[MAX_PLAYER];$/;"	m	class:Player	access:public
pout	player.cpp	/^static ofstream pout;$/;"	v	file:
print	card.cpp	/^string Card::print()$/;"	f	class:Card	signature:()
print	card.h	/^	string print();$/;"	p	class:Card	access:public	signature:()
print	hand.cpp	/^void Hand::print()$/;"	f	class:Hand	signature:()
print	hand.h	/^	void print();$/;"	p	class:Hand	access:public	signature:()
print	simuplayer.cpp	/^void SimuPlayer::print()$/;"	f	class:SimuPlayer	signature:()
print	simuplayer.h	/^	void print();$/;"	p	class:SimuPlayer	access:public	signature:()
printDeck	simu.cpp	/^void Simu::printDeck()$/;"	f	class:Simu	signature:()
printDeck	simu.h	/^	void printDeck(); \/\/for deck$/;"	p	class:Simu	access:public	signature:()
printDetails	hand.cpp	/^void Hand::printDetails()$/;"	f	class:Hand	signature:()
printDetails	hand.h	/^	void printDetails();$/;"	p	class:Hand	access:public	signature:()
pstate	player.h	/^	vector<PlayerInfo> pstate;$/;"	m	class:Player	access:public
pwin	shand.h	/^	float pwin;$/;"	m	class:StartHand	access:public
rank	hand.h	/^	int rank;$/;"	m	class:Hand	access:public
rcvFlop	player.cpp	/^void Player::rcvFlop(vector<Card> flop)$/;"	f	class:Player	signature:(vector<Card> flop)
rcvFlop	player.h	/^	void rcvFlop(vector<Card> flop); \/\/start set state=flop, end state++$/;"	p	class:Player	access:public	signature:(vector<Card> flop)
rcvHole	player.cpp	/^void Player::rcvHole(vector<Card> hole)$/;"	f	class:Player	signature:(vector<Card> hole)
rcvHole	player.h	/^	void rcvHole(vector<Card> hole);$/;"	p	class:Player	access:public	signature:(vector<Card> hole)
rcvLstRound	player.cpp	/^void Player::rcvLstRound(vector<RdState> lastrd)$/;"	f	class:Player	signature:(vector<RdState> lastrd)
rcvLstRound	player.h	/^	void rcvLstRound(vector<RdState> lastrd);$/;"	p	class:Player	access:public	signature:(vector<RdState> lastrd)
rcvOppoAct	player.cpp	/^void Player::rcvOppoAct(string pid, Action act)$/;"	f	class:Player	signature:(string pid, Action act)
rcvOppoAct	player.h	/^	void rcvOppoAct(string pid, Action act);$/;"	p	class:Player	access:public	signature:(string pid, Action act)
rcvPHand	player.cpp	/^void Player::rcvPHand(string pid, int hand)$/;"	f	class:Player	signature:(string pid, int hand)
rcvPHand	player.h	/^	void rcvPHand(string pid, int hand);$/;"	p	class:Player	access:public	signature:(string pid, int hand)
rcvPHole	player.cpp	/^void Player::rcvPHole(string pid, Card card)$/;"	f	class:Player	signature:(string pid, Card card)
rcvPHole	player.h	/^	void rcvPHole(string pid, Card card);$/;"	p	class:Player	access:public	signature:(string pid, Card card)
rcvPot	player.cpp	/^void Player::rcvPot(int pot)$/;"	f	class:Player	signature:(int pot)
rcvPot	player.h	/^	void rcvPot(int pot);$/;"	p	class:Player	access:public	signature:(int pot)
rcvPotwin	player.cpp	/^void Player::rcvPotwin(string pid, int share)$/;"	f	class:Player	signature:(string pid, int share)
rcvPotwin	player.h	/^	void rcvPotwin(string pid, int share);$/;"	p	class:Player	access:public	signature:(string pid, int share)
rcvRiver	player.cpp	/^void Player::rcvRiver(Card card)$/;"	f	class:Player	signature:(Card card)
rcvRiver	player.h	/^	void rcvRiver(Card card);$/;"	p	class:Player	access:public	signature:(Card card)
rcvSeat	player.cpp	/^void Player::rcvSeat(vector<PlayerInfo> players)$/;"	f	class:Player	signature:(vector<PlayerInfo> players)
rcvSeat	player.h	/^	void rcvSeat(vector<PlayerInfo> players); \/\/blind is a oppo action$/;"	p	class:Player	access:public	signature:(vector<PlayerInfo> players)
rcvTurn	player.cpp	/^void Player::rcvTurn(Card card)$/;"	f	class:Player	signature:(Card card)
rcvTurn	player.h	/^	void rcvTurn(Card card);$/;"	p	class:Player	access:public	signature:(Card card)
read	mailman.cpp	/^string Mailman::read()$/;"	f	class:Mailman	signature:()
read	mailman.h	/^	string read();$/;"	p	class:Mailman	access:public	signature:()
readBlind	plyrshel.cpp	/^void PlayerShell::readBlind(string& message)$/;"	f	class:PlayerShell	signature:(string& message)
readBlind	plyrshel.h	/^	void readBlind(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readFlop	plyrshel.cpp	/^void PlayerShell::readFlop(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
readFlop	plyrshel.h	/^	void readFlop(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readHold	plyrshel.cpp	/^void PlayerShell::readHold(string& message)$/;"	f	class:PlayerShell	signature:(string& message)
readHold	plyrshel.h	/^	void readHold(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readInquire	plyrshel.cpp	/^void PlayerShell::readInquire(string msg)$/;"	f	class:PlayerShell	signature:(string msg)
readInquire	plyrshel.h	/^	void readInquire(string msg);$/;"	p	class:PlayerShell	access:public	signature:(string msg)
readNotify	plyrshel.cpp	/^void PlayerShell::readNotify(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
readNotify	plyrshel.h	/^	void readNotify(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readPotwin	plyrshel.cpp	/^void PlayerShell::readPotwin(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
readPotwin	plyrshel.h	/^	void readPotwin(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readRiver	plyrshel.cpp	/^void PlayerShell::readRiver(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
readRiver	plyrshel.h	/^	void readRiver(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readSeat	plyrshel.cpp	/^void PlayerShell::readSeat(string& message)$/;"	f	class:PlayerShell	signature:(string& message)
readSeat	plyrshel.h	/^	void readSeat(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readShowdown	plyrshel.cpp	/^void PlayerShell::readShowdown(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
readShowdown	plyrshel.h	/^	void readShowdown(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
readTurn	plyrshel.cpp	/^void PlayerShell::readTurn(string& msg)$/;"	f	class:PlayerShell	signature:(string& msg)
readTurn	plyrshel.h	/^	void readTurn(string& msg);$/;"	p	class:PlayerShell	access:public	signature:(string& msg)
reco	simuplayer.h	/^	vector<Card> reco;$/;"	m	class:SimuPlayer	access:private
reflect	player.cpp	/^void Player::reflect()$/;"	f	class:Player	signature:()
reflect	player.h	/^	virtual void reflect();$/;"	p	class:Player	access:public	signature:()
river	simuplayer.cpp	/^void SimuPlayer::river()$/;"	f	class:SimuPlayer	signature:()
river	simuplayer.h	/^	void river();$/;"	p	class:SimuPlayer	access:private	signature:()
seen	simuplayer.h	/^	vector<Card> seen; \/\/all seen cards in comm and hole$/;"	m	class:SimuPlayer	access:private
sendBet	player.h	/^	virtual Action sendBet()=0; \/\/the way player bets differ $/;"	p	class:Player	access:public	signature:()
sendBet	shrewdpl.cpp	/^Action ShrewdPlayer::sendBet()$/;"	f	class:ShrewdPlayer	signature:()
sendBet	shrewdpl.h	/^	Action sendBet();$/;"	p	class:ShrewdPlayer	access:public	signature:()
sendBet	snorepl.cpp	/^Action SnorePlayer::sendBet()$/;"	f	class:SnorePlayer	signature:()
sendBet	snorepl.h	/^	Action sendBet();$/;"	p	class:SnorePlayer	access:public	signature:()
sendReg	player.cpp	/^vector<string> Player::sendReg()$/;"	f	class:Player	signature:()
sendReg	player.h	/^	vector<string> sendReg();$/;"	p	class:Player	access:public	signature:()
server_addr	mailman.h	/^	struct sockaddr_in server_addr;$/;"	m	class:Mailman	typeref:struct:Mailman::sockaddr_in	access:public
server_ip	mailman.h	/^	char server_ip[MAXLEN], server_port[MAXLEN];$/;"	m	class:Mailman	access:public
server_port	mailman.h	/^	char server_ip[MAXLEN], server_port[MAXLEN];$/;"	m	class:Mailman	access:public
setMsg	mailman.cpp	/^void Mailman::setMsg(string msg)$/;"	f	class:Mailman	signature:(string msg)
setMsg	mailman.h	/^	void setMsg(string msg);$/;"	p	class:Mailman	access:public	signature:(string msg)
setPlayerInfo	plyrinfo.cpp	/^void PlayerInfo::setPlayerInfo(string pid, int jetton, int money)$/;"	f	class:PlayerInfo	signature:(string pid, int jetton, int money)
setPlayerInfo	plyrinfo.h	/^	void setPlayerInfo(string pid, int jetton, int money);$/;"	p	class:PlayerInfo	access:public	signature:(string pid, int jetton, int money)
setPlayers	simu.cpp	/^void Simu::setPlayers(int nPlayers)$/;"	f	class:Simu	signature:(int nPlayers)
setPlayers	simu.h	/^	void setPlayers(int nPlayers); \/\/for nPlayers$/;"	p	class:Simu	access:public	signature:(int nPlayers)
setReg	player.cpp	/^void Player::setReg(char* pid, char* name)$/;"	f	class:Player	signature:(char* pid, char* name)
setReg	player.h	/^	void setReg(char* pid, char* name);$/;"	p	class:Player	access:public	signature:(char* pid, char* name)
setState	simuplayer.cpp	/^void SimuPlayer::setState(int state, vector<Card> hole, vector<Card> comm)$/;"	f	class:SimuPlayer	signature:(int state, vector<Card> hole, vector<Card> comm)
setState	simuplayer.h	/^	void setState(int state, vector<Card> hole, vector<Card> comm);$/;"	p	class:SimuPlayer	access:public	signature:(int state, vector<Card> hole, vector<Card> comm)
shareOfPot	player.h	/^	vector<int> shareOfPot;$/;"	m	class:Player	access:public
shuffle	simu.cpp	/^void Simu::shuffle()$/;"	f	class:Simu	signature:()
shuffle	simu.h	/^	void shuffle(); $/;"	p	class:Simu	access:public	signature:()
simulate	simuplayer.cpp	/^float SimuPlayer::simulate(int times)$/;"	f	class:SimuPlayer	signature:(int times)
simulate	simuplayer.h	/^	float simulate(int times);$/;"	p	class:SimuPlayer	access:public	signature:(int times)
socket_fd	mailman.h	/^	int socket_fd;$/;"	m	class:Mailman	access:public
sort	checkplus.cpp	/^void CheckerPlus::sort(vector<Card>& handcard)$/;"	f	class:CheckerPlus	signature:(vector<Card>& handcard)
sort	checkplus.h	/^	static void sort(vector<Card>& hand);$/;"	p	class:CheckerPlus	access:public	signature:(vector<Card>& hand)
start	plyrshel.cpp	/^void PlayerShell::start()$/;"	f	class:PlayerShell	signature:()
start	plyrshel.h	/^	void start();$/;"	p	class:PlayerShell	access:public	signature:()
state	action.h	/^	int state;$/;"	m	class:Action	access:public
state	player.h	/^	int state;$/;"	m	class:Player	access:public
state	rdstate.h	/^	int state; \/\/in which round is last act$/;"	m	class:RdState	access:public
state	simuplayer.h	/^	int state; \/\/state of the game$/;"	m	class:SimuPlayer	access:private
sticky	plyrshel.cpp	/^string PlayerShell::sticky(string& message, string header)$/;"	f	class:PlayerShell	signature:(string& message, string header)
sticky	plyrshel.h	/^	string sticky(string& message, string header);$/;"	p	class:PlayerShell	access:private	signature:(string& message, string header)
tmp	player.h	/^	bool tmp;$/;"	m	class:Player	access:public
turn	simuplayer.cpp	/^void SimuPlayer::turn()$/;"	f	class:SimuPlayer	signature:()
turn	simuplayer.h	/^	void turn();$/;"	p	class:SimuPlayer	access:private	signature:()
type	player.h	/^	int type;$/;"	m	class:Player	access:public
write	mailman.cpp	/^void Mailman::write()$/;"	f	class:Mailman	signature:()
write	mailman.cpp	/^void Mailman::write(string msg)$/;"	f	class:Mailman	signature:(string msg)
write	mailman.h	/^	void write();$/;"	p	class:Mailman	access:public	signature:()
write	mailman.h	/^	void write(string msg);$/;"	p	class:Mailman	access:public	signature:(string msg)
writeAction	plyrshel.cpp	/^void PlayerShell::writeAction()$/;"	f	class:PlayerShell	signature:()
writeAction	plyrshel.h	/^	void writeAction();$/;"	p	class:PlayerShell	access:public	signature:()
writeReg	plyrshel.cpp	/^void PlayerShell::writeReg()$/;"	f	class:PlayerShell	signature:()
writeReg	plyrshel.h	/^	void writeReg();$/;"	p	class:PlayerShell	access:public	signature:()
~Player	player.cpp	/^Player::~Player()$/;"	f	class:Player	signature:()
~Player	player.h	/^	virtual ~Player();$/;"	p	class:Player	access:public	signature:()
~PlayerShell	plyrshel.cpp	/^PlayerShell::~PlayerShell()$/;"	f	class:PlayerShell	signature:()
~PlayerShell	plyrshel.h	/^	~PlayerShell();$/;"	p	class:PlayerShell	access:public	signature:()
